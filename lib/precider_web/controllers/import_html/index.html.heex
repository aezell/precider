<.header>
  Import Ingredients
  <:subtitle>Import ingredients from a CSV file</:subtitle>
</.header>

<div class="max-w-2xl mx-auto">
  <div class="mb-8 p-4 bg-base-200 rounded-lg">
    <h3 class="text-lg font-medium text-base-content mb-2">CSV Format</h3>
    <p class="text-sm text-base-content/70">
      Your CSV file should have the following columns:
    </p>
    <ul class="list-disc list-inside text-sm text-base-content/70 mt-2">
      <li><strong>name</strong> (required) - The name of the ingredient</li>
      <li><strong>description</strong> (optional) - A description of the ingredient</li>
      <li><strong>benefits</strong> (optional) - The benefits of the ingredient</li>
    </ul>
  </div>

  <form id="import-form" class="space-y-4">
    <div>
      <label for="csv-file" class="block text-sm font-medium text-base-content">CSV File</label>
      <input
        type="file"
        id="csv-file"
        name="csv-file"
        accept=".csv"
        class="mt-1 block w-full text-sm text-base-content
               file:mr-4 file:py-2 file:px-4
               file:rounded-md file:border-0
               file:text-sm file:font-semibold
               file:bg-indigo-50 file:text-indigo-700
               hover:file:bg-indigo-100"
        required
      />
    </div>

    <div>
      <button
        type="submit"
        class="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        Import Ingredients
      </button>
    </div>
  </form>

  <div id="preview" class="mt-8 hidden">
    <h3 class="text-lg font-medium text-base-content">Preview</h3>
    <div class="mt-2 overflow-x-auto">
      <table class="min-w-full divide-y divide-base-300">
        <thead class="bg-base-200">
          <tr id="preview-headers"></tr>
        </thead>
        <tbody id="preview-body" class="bg-base-100 divide-y divide-base-300"></tbody>
      </table>
    </div>
  </div>
</div>

<script>
  document.getElementById('import-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const fileInput = document.getElementById('csv-file');
    const file = fileInput.files[0];
    
    if (!file) {
      alert('Please select a CSV file');
      return;
    }
    
    try {
      const text = await file.text();
      
      // Parse CSV - handle quoted values and empty fields
      const rows = text.split('\n')
        .filter(row => row.trim() !== '') // Remove empty lines
        .map(row => {
          const result = [];
          let current = '';
          let inQuotes = false;
          
          for (let i = 0; i < row.length; i++) {
            const char = row[i];
            
            if (char === '"') {
              if (inQuotes && row[i + 1] === '"') {
                // Handle escaped quotes
                current += '"';
                i++; // Skip the next quote
              } else {
                inQuotes = !inQuotes;
              }
            } else if (char === ',' && !inQuotes) {
              result.push(current.trim());
              current = '';
            } else {
              current += char;
            }
          }
          
          // Add the last field
          result.push(current.trim());
          
          return result;
        });

      const headers = rows[0];
      const data = rows.slice(1);
      
      // Validate headers
      const requiredHeaders = ['name'];
      const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));
      
      if (missingHeaders.length > 0) {
        throw new Error(`Missing required columns: ${missingHeaders.join(', ')}`);
      }
      
      // Show preview
      const preview = document.getElementById('preview');
      const previewHeaders = document.getElementById('preview-headers');
      const previewBody = document.getElementById('preview-body');
      
      preview.classList.remove('hidden');
      previewHeaders.innerHTML = headers.map(header => `<th class="px-6 py-3 text-left text-xs font-medium text-base-content uppercase tracking-wider">${header}</th>`).join('');
      previewBody.innerHTML = data.slice(0, 5).map(row => `
        <tr>
          ${row.map(cell => `<td class="px-6 py-4 whitespace-nowrap text-sm text-base-content">${cell}</td>`).join('')}
        </tr>
      `).join('');
      
      // Submit data to server
      const formData = new FormData();
      formData.append('headers', JSON.stringify(headers));
      formData.append('data', JSON.stringify(data));
      
      const response = await fetch('/api/import', {
        method: 'POST',
        body: formData
      });
      
      if (response.ok) {
        alert('Ingredients imported successfully!');
      } else {
        const error = await response.json();
        throw new Error(error.message || 'Import failed');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to import ingredients: ' + error.message);
    }
  });
</script> 